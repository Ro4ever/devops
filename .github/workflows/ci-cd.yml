name: 🚀 CI/CD Pipeline - DevOps Demo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: devops
  NODE_VERSION: '18'

jobs:
  # Job de Build e Testes
  build-test:
    name: 🏗️ Build e Testes
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Cache de dependências
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: 🔍 Análise de código
      run: |
        echo "🔍 Executando análise estática..."
        echo "✅ Verificação de sintaxe HTML - PASSOU"
        echo "✅ Verificação de CSS - PASSOU"
        echo "✅ Análise de segurança - PASSOU"
        
    - name: 🧪 Executar testes unitários
      run: |
        echo "🧪 Executando bateria de testes..."
        echo "✅ Teste 1: Estrutura HTML válida - PASSOU"
        echo "✅ Teste 2: CSS responsivo - PASSOU"
        echo "✅ Teste 3: JavaScript funcional - PASSOU"
        echo "✅ Teste 4: Acessibilidade - PASSOU"
        echo "🎉 Todos os ${TEST_COUNT:-4} testes passaram!"
    - name: 🏗️ Build da aplicação
      run: |
        echo "🔨 Iniciando processo de build..."
        mkdir -p dist
        cp -r src/* dist/
        
        echo "📝 Gerando metadados do build..."
        cat > dist/build-info.json << EOF
        {
          "buildId": "${{ github.run_number }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "author": "${{ github.actor }}",
          "project": "${{ env.PROJECT_NAME }}"
        }
        EOF
        
        echo "✅ Build concluído com sucesso!"
        
    - name: 🔍 Validação do build
      run: |
        echo "🔍 Validando integridade do build..."
        
        # Verificar se arquivos existem
        files=("dist/index.html" "dist/build-info.json")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file - OK"
          else
            echo "❌ $file - FALTANDO"
            exit 1
          fi
        done
        
        # Verificar tamanho dos arquivos
        size=$(du -sh dist/ | cut -f1)
        echo "📊 Tamanho do build: $size"
        
        echo "🎉 Build validado com sucesso!"
        
    - name: 📦 Upload dos artefatos
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ github.run_number }}
        path: dist/
        retention-days: 30

  # Job de Deploy
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Download dos artefatos
      uses: actions/download-artifact@v4
      with:
        name: build-${{ github.run_number }}
        path: dist/
        
    - name: 🚀 Deploy para produção (simulado)
      run: |
        echo "🚀 Iniciando deploy para ambiente de produção..."
        echo "🔧 Configurando ambiente..."
        echo "📤 Enviando arquivos para servidor..."
        
        # Simular upload de arquivos
        for i in {1..5}; do
          echo "📁 Enviando arquivos... [$i/5]"
          sleep 1
        done
        
        echo "🔄 Limpando cache..."
        echo "🌐 Reiniciando serviços web..."
        echo "🔍 Verificando saúde da aplicação..."
        
        # Simular health check
        echo "❤️ Health check: OK"
        echo "🌍 URL da aplicação: https://meu-projeto-devops.exemplo.com"
        
        echo "✅ Deploy realizado com sucesso!"
        
    - name: 🔔 Notificação de deploy
      run: |
        echo "📢 Deploy concluído com sucesso!"
        echo "🎯 Ambiente: Produção"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Autor: ${{ github.actor }}"
        echo "⏰ Horário: $(date)"

  # Job de Testes Pós-Deploy
  post-deploy-tests:
    name: 🧪 Testes Pós-Deploy
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: 🔍 Testes de fumaça
      run: |
        echo "💨 Executando smoke tests..."
        echo "✅ Teste de conectividade - PASSOU"
        echo "✅ Teste de response time - PASSOU"  
        echo "✅ Teste de endpoints - PASSOU"
        echo "🎉 Aplicação funcionando corretamente!"
        
    - name: 📊 Relatório final
      run: |
        echo "📊 === RELATÓRIO FINAL DO PIPELINE ==="
        echo "🏗️ Build: ✅ Sucesso"
        echo "🧪 Testes: ✅ Todos passaram"
        echo "🚀 Deploy: ✅ Realizado"
        echo "🔍 Validação: ✅ OK"
        echo ""
        echo "🎉 Pipeline executado com 100% de sucesso!"
        echo "⏱️ Tempo total: ${{ github.event.head_commit.timestamp }}"